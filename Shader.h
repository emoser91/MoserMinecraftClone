#ifndef SHADER_INCLUDED_H
#define SHADER_INCLUDED_H

#include <string>
#include <GL/glew.h>
#include "transform.h"
#include "Camera.h"

/*
Shaders are programs for the GPU that handle specific tasks on the GPU such as:
	VertexShader: takes in data and transforms it into data the GPU can handle
	FragmentShader: takes pixels generated by the GPU and decides what color they should be
*/
class Shader
{
	public:
		Shader(const std::string& fileName);

		void Bind();
		void Update(const Transform& transform, const Camera& camera);

		virtual ~Shader();

	protected:
	private:
		static const unsigned int NUM_SHADERS = 2; //Set to 3 if using geometry shaders

		void operator=(const Shader& shader) {}
		Shader(const Shader& shader) {}

		std::string LoadShader(const std::string& fileName);
		void CheckShaderError(GLuint shader, GLuint flag, bool isProgram, const std::string& errorMessage);
		GLuint CreateShader(const std::string& text, unsigned int type);

		enum
		{
			TRANSFROM_U,

			NUM_UNIFORMS
		};

		GLuint m_program; //opengl handle that keeps track of where the program is
		GLuint m_shaders[NUM_SHADERS];
		GLuint m_uniforms[NUM_UNIFORMS];
};

#endif //SHADER_INCLUDED_H